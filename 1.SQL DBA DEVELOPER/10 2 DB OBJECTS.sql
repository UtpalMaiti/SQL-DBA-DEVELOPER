USE DB_OBJECTS 
GO

USE TEMPDB
GO
CREATE TABLE EMP_INFO			
(
EMP_ID	 INT PRIMARY KEY,	
EMP_FNAME	VARCHAR (30) UNIQUE,	 
EMP_CNTRY	CHAR(50), EMP_SAL	BIGINT		
)	

			
INSERT 	 EMP_INFO VALUES	(1001, 'AMIN',  'CANADA', 45678) ,	('1002', 'JOHN', 'CANADA', 643643)	
INSERT   EMP_INFO VALUES	(1003, 'SAI', 'INDIA', 36363),		(1004, 'SAISHA', 'INDIA',20000)		
INSERT   EMP_INFO VALUES	(1005, 'SAISH', 'INDIA', 43643),	(1006, 'ADAM', 'USA', NULL)   

SELECT * FROM EMP_INFO 
SELECT * FROM EMP_INFO WHERE EMP_CNTRY = 'CANADA'


-- EXAMPLE 1:  USER DEFINED VIEWS 
CREATE VIEW VW_CANADA 
AS 
SELECT * FROM EMP_INFO WHERE EMP_CNTRY = 'CANADA'
GO

SELECT * FROM VW_CANADA

CREATE VIEW VW_USA 
AS 
SELECT * FROM EMP_INFO WHERE EMP_CNTRY = 'USA'
GO
SELECT * FROM VW_USA

-- DURING DB CREATION, SET OF SYSTEM VIEWS ARE AUTO CREATED.   METADATA  = SYSTEM PREDEFINED DATA FOR AUDITS.
SELECT * FROM SYS.DATABASES				-- TO REPORT LIST OF ALL DATABASES IN THE SERVER
SELECT * FROM SYS.SCHEMAS				-- TO REPORT LIST OF ALL SCHEMAS IN THE DATABASE
SELECT * FROM SYS.TABLES				-- TO REPORT LIST OF ALL USER DEFINED TABLES IN THE DATABASE
SELECT * FROM SYS.COLUMNS				-- TO REPORT LIST OF ALL COLUMNS FROM ALL TABLES, VIEWS IN THE DATABASE
SELECT * FROM SYS.FOREIGN_KEYS			-- TO REPORT LIST OF ALL FOREIGN_KEYS FROM USER TABLES IN THE DATABASE
SELECT * FROM SYS.CHECK_CONSTRAINTS		-- TO REPORT LIST OF ALL CHECK CONSTRAINTS FROM USER TABLES IN THE DATABASE
SELECT * FROM SYS.INDEXES				-- TO REPORT LIST OF ALL INDEXES IN THE DATABASE
SELECT * FROM SYS.OBJECTS				-- TO REPORT LIST OF ALL OBJECTS [USER & SYSTEM DEFINED] IN THE DATABASE


-- EXAMPLE 2:	STORED PROCEDURES (SPROCS OR PROCS)		
CREATE PROCEDURE  USP_REPEMP  @CNTRY VARCHAR(9)			-- "@" PREFIX IS USED FOR INPUT VALUES : PARAMETERS
AS 
SELECT * FROM EMP_INFO WHERE EMP_CNTRY = @CNTRY

EXECUTE USP_REPEMP 'CANADA'			
EXEC	USP_REPEMP 'USA'


-- IMPORTANT SYSTEM PROCEDURES : FOR METADATA [SYSTEM INFORMATION] AUDITS
EXEC SP_HELPDB									-- TO REPORT LIST OF ALL DATABASES IN THE SERVER
EXEC SP_HELP	'EMP_INFO'  					-- TO REPORT DEFINITION OF THE GIVEN OBJECT [TABLE]
EXEC SP_HELPINDEX 'EMP_INFO'					-- TO REPORT ALL INDEXES OF THE GIVEN TABLE
EXEC SP_PKEYS	'EMP_INFO'						-- TO REPORT PRIMARY KEY INFORMATION OF THE GIVEN TABLE
EXEC SP_RENAME 'EMP_INFO', 'NEW_TABLE_NAME'  	-- RENAME A TABLE OR DATABASE OBJECT
EXEC SP_RECOMPILE	'USP_REPEMP'    			-- RECOMPILE (CONVERT) THE QUERY FROM SQL LANGUAGE TO MACHINE CODE
EXEC SP_HELPTEXT	'VW_CANADA'    				-- REPORT DEFINITION OF PROCEDURE / VIEW  / FUNCTION

EXEC SP_RENAME  'NEW_TABLE_NAME' , 'EMP_INFO'  	-- RENAME A TABLE OR DATABASE OBJECT


-- EXAMPLE 3:	USER DEFINED FUNCTIONS				-- @PREFIX REQUIRED FOR INPUT VALUES : PARAMETERS
CREATE FUNCTION UDF_REPEMP (@CNTRY VARCHAR(9))
RETURNS table										-- here, table is a data type
AS 
RETURN ( SELECT * FROM EMP_INFO WHERE EMP_CNTRY = @CNTRY )

SELECT * FROM UDF_REPEMP('CANADA')  
SELECT * FROM UDF_REPEMP('USA')		WHERE EMP_ID > 10 


-- IMPORTANT SYSTEM FUNCTIONS : FOR METADATA [SYSTEM INFORMATION] AUDITS
SELECT DB_NAME(2)					-- REPORTS DATABASE NAME FOR A GIVEN DATABASE ID
SELECT DB_ID('tempdb') 				-- REPORTS DATABASE ID FOR A GIVEN DATABASE NAME

SELECT OBJECT_ID('EMP_INFO') 		-- REPORTS OBJECT ID FOR A GIVEN OBJECT NAME
SELECT OBJECT_NAME(837578022) 		-- REPORTS OBJECT NAME FOR A GIVEN OBJECT ID
SELECT OBJECT_NAME(645577338) 		-- REPORTS OBJECT NAME FOR A GIVEN OBJECT ID

SELECT GETDATE()				-- REPORTS TODAY'S DATE & TIME
SELECT @@SERVERNAME				-- REPORTS THE CURRENTLY CONNECTED SERVER NAME
SELECT @@VERSION				-- REPORTS VERSION, EDITION OF THE CONNECTED SQL SERVER
SELECT @@error				-- REPORTS VERSION, EDITION OF THE CONNECTED SQL SERVER

--INSERT INTO [db_error_logging]  
--             (
--             ErrorNumber 
--            ,ErrorDescription 
--            ,ErrorProcedure 
--            ,ErrorState 
--            ,ErrorSeverity 
--            ,ErrorLine 
--            ,ErrorTime 
--           )
--           VALUES
--           (
--             ERROR_NUMBER()
--            ,ERROR_MESSAGE()
--            ,ERROR_PROCEDURE()
--            ,ERROR_STATE()
--            ,ERROR_SEVERITY()
--            ,ERROR_LINE()
--            ,GETDATE()  
--           );

SELECT ERROR_MESSAGE()


/*
WHEN TO USE WHICH DATABASE OBJECTS?

	SCHEMAS						-		TO GROUP MULTIPLE OBJECTS [LIKE TABLES]

	TABLES						-		TO STORE DATA

	INDEXES						-		FOR FASTER SEARCH OPERATIONS

	CONSTRAINTS					-		FOR VALID DATA STORAGE

	VIEWS						-		TO STORE STATIC  SELECT QUERY.					ROW LEVEL SECURITY [RLS]

	FUNCTIONS					-		TO STORE DYNAMIC SELECT, DML QUERIES.			FLEXIBLE FOR REPORTING
	
	PROCEDURES					-		TO STORE DYNAMIC SELECT, DML, DDL QUERIES.		FASTER. PROGRAMMING

	TRIGGERS					-		TO STORE DYNAMIC SELECT, DML, DDL QUERIES.		AUTOMATED EXECUTIONS	
*/

