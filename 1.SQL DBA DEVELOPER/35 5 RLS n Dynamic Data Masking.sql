/*
RLS : ROW LEVEL SECURITY	:	A TECHNIQUE USED TO hide FEW SPECIFIC ROWS FOR REQUIRED USERS. 
EXAMPLE:
ASSUME A SALES TABLE.   MANAGER SHOULD HAVE ACCESS TO ALL ROWS IN THE TABLE.  
SALESMEN SHOULD HAVE ACCESS TO THEIR DATA ONLY. SHOULD NOT SEE / ACCESS OTHER'S DATA. 

STEPS TO IMPLEMENT RLS:
	STEP 1: CREATE USERS IN THE DATABASE 
	STEP 2: CREATE A FUNCTION TO FILTER THE ROWS ON REQUIRED TABLES, SPECIFY CONDITIONS BASED ON ABOVE USERS
	STEP 3: CREATE SECURITY POLICY, LINK TO ABOVE PREDICATE FUNCTION
	STEP 4: "EXECUTE AS" ABOVE DEFINED USERS AND TEST THE POLICIES 
*/

-- STEP 1: DEFINE TABLES AND DATA IN THE DATABASE
CREATE TABLE TBLSales3
    (  
    OrderID int,  
    SalesRep sysname,  
    Product varchar(10),  
    Qty int  
    );


INSERT TBLSales3 VALUES		(1, 'Sales1', 'Valve', 5),  (2, 'Sales1', 'Wheel', 2),   (3, 'Sales1', 'Valve', 4),  
							(4, 'Sales2', 'Bracket', 2), (5, 'Sales2', 'Wheel', 5),  (6, 'Sales2', 'Seat', 5);  

SELECT * FROM TBLSales3;


-- STEP 2: DEFINE USERS IN THE DATABASE
CREATE USER Manager WITHOUT LOGIN;  
CREATE USER Sales1 WITHOUT LOGIN;  
CREATE USER Sales2 WITHOUT LOGIN;


-- STEP 3: PROVIDE READ PERMISSIONS ON ABOVE TABLE TO THE NEWLY CREATED USERS
GRANT SELECT ON TBLSales3 TO Manager;  
GRANT SELECT ON TBLSales3 TO Sales1;  
GRANT SELECT ON TBLSales3 TO Sales2;


-- STEP 4: ACTUAL IMPLEMENATION OF RLS : ROW LEVEL SECURITY
CREATE SCHEMA Security;  
GO  

CREATE FUNCTION Security.fn_securitypredicate3(@SalesRep AS sysname)  
RETURNS TABLE  
WITH SCHEMABINDING				-- PURPOSE	:	TO BIND THE FUNCTION TO THE TABLE. 
AS  
    RETURN  
			SELECT 1 AS fn_securitypredicate_result   
			WHERE @SalesRep = USER_NAME() OR USER_NAME() = 'Manager'
			

-- TEST ABOVE FUNCTION:
SELECT  * FROM Security.fn_securitypredicate ('Sales1')
SELECT  * FROM Security.fn_securitypredicate ('Manager')
SELECT  * FROM Security.fn_securitypredicate ('dbo')

CREATE SECURITY POLICY Sales_Filter3  
ADD FILTER PREDICATE Security.fn_securitypredicate3(SalesRep)   
ON dbo.TBLSales3 
WITH (STATE = ON);


EXECUTE AS USER = 'Sales1';  
SELECT * FROM TBLSales3;   
REVERT;  


EXECUTE AS USER = 'Sales2';  
SELECT * FROM TBLSales3;   
REVERT;  


EXECUTE AS USER = 'Manager';  
SELECT * FROM TBL_Sales;   
REVERT;


ALTER SECURITY POLICY Sales_Filter  
WITH (STATE = OFF);



/* DYNAMIC DATA MASKING */
-- A MECHANISM TO hide A PART OF THE COLUMN DATA, REPORT ALL OTHER DATA AS USUAL. 
-- EX: HIDE THE CREDIT CARD NUMBERS EXCEPT LAST 4 DIGITS

-- STEP 1:											CREATE USERS
CREATE USER USER11 WITHOUT LOGIN
CREATE USER USER22  WITHOUT LOGIN

-- STEP 2:											CREATE ROLES
CREATE ROLE [Sales Manager]
CREATE ROLE [Sales Person]

-- STEP 3:											ASSIGN PERMISSIONS TO THE ROLES
GRANT SELECT ON CUSTOMERS_DATA TO [Sales Manager]  
GRANT SELECT ON CUSTOMERS_DATA TO [Sales Person]

-- STEP 4:											ADD USERS AS MEMBERS TO ABOVE CREATED ROLES
ALTER ROLE [Sales Manager]	ADD MEMBER USER11
ALTER ROLE [Sales Person]	ADD MEMBER USER22

-- STEP 5: ENABLE DATA MASKING ON THE REQUIRED COLUMN
ALTER TABLE CUSTOMERS_DATA ALTER COLUMN EmailAddress ADD MASKED WITH (FUNCTION =  'EMAIL()')  

-- STEP 6: TESTING PROCESS:
SELECT CustomerKey, FirstName, LastName, EmailAddress, Phone FROM CUSTOMERS_DATA 
GRANT UNMASK TO [Sales Manager]
GO

EXECUTE AS user = 'USER11'
SELECT TOP 3 CustomerKey, FirstName, LastName, EmailAddress, Phone FROM CUSTOMERS_DATA 
revert		-- THIS STATEMENT IS USED TO REVERT / GO BACK TO ORIGINAL USER


EXECUTE AS user = 'USER22'
SELECT TOP 3 CustomerKey, FirstName, LastName, EmailAddress, Phone FROM CUSTOMERS_DATA 
revert		-- THIS STATEMENT IS USED TO REVERT / GO BACK TO ORIGINAL USER

