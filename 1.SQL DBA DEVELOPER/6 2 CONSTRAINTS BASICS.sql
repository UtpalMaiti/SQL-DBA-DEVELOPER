/*
CONSTRAINTS ARE CONDITIONS DEFINED ON TABLES, FOR VALID DATA STORAGE.			
TYPES OF CONSTRAINTS:				
1.	NOT NULL		: This column does not allow NULLS. Means, mandatory column 
2.	NULL			: This column allow nulls. Means, column value is optional.
3.	UNIQUE			: This column does not allow duplicates. Allows up to 1 null value
4.	PRIMARY KEY		: This column does not allow duplicates, Does not allow null value 

5.	FOREIGN KEY		: This is used to reference / link one table to another  table.
			SUCH DATABASES THAT CONTAINS RELATIONS ARE "RDB"

6.	CHECK CONSTRAINT :  Used to specify conditions on column values.	
7.	DEFAULT CONSTRAINT: Used to insert a default value to the column. 	
8.	IDENTITY PROPERTY :  Used to insert automated sequence of values. Ex: 1001, 1002....
 ___________________________________________________________________________  */

-- QUERY 1: 
CREATE DATABASE UNIVERSITYDATABASE2

-- QUERY 2:
USE UNIVERSITYDATABASE2

-- QUERY 3:
CREATE TABLE TBLCOURSES
(
COURSE_ID INT PRIMARY KEY,			-- this column does not allow duplicates, nulls		
COURSE_NAME VARCHAR(30) NOT NULL,	-- this column does not allow null values [MANDATORY]	
COURSE_DUR INT CHECK (COURSE_DUR = 120  OR COURSE_DUR = 180)
)

-- QUERY 4: 
INSERT INTO TBLCOURSES VALUES (101, 'COMPUTERS', 120),  (102, 'ROBOTICS', 180)
INSERT INTO TBLCOURSES VALUES (101, 'civil', 120)		-- ERROR. REASON : DUPLICATE COURSE ID

-- QUERY 5: 
SELECT * FROM TBLCOURSES

-- QUERY 6: 
CREATE TABLE TBLSTUDENTS
(
STD_ID INT UNIQUE,			-- THIS COLUMN DOES NOT ALLOW DUPLICATES. ALLOW UPTO 1 NULL VALUE
STD_NAME VARCHAR(30),
STD_AGE INT CHECK (STD_AGE >= 18),
STD_COURSE_ID INT REFERENCES tblcourses(course_id)   -- THIS COLUMN VALUE SHOULD MATCH WITH tblcourses TABLE : course_id COLUMN
)

-- QUERY 7: 
INSERT  INTO  TBLSTUDENTS VALUES (1001, 'SAI', 34, 101),        (1002, 'JON', 34, 101)   
INSERT  INTO  TBLSTUDENTS VALUES (1003, 'JOHNE', 34, 102),		(1004, 'JOHNY', 34, 102)   

-- QUERY 8: 
SELECT * FROM TBLSTUDENTS

INSERT  INTO  TBLSTUDENTS VALUES (1005, 'SAISHA', 33, 109)			-- INVALID COURSE ID. HENCE, ERROR. 


-- QUERY 9: 
CREATE TABLE TBLSTAFF
(
STF_ID INT IDENTITY(100001,1),			-- IDENTITY : USED TO INSERT AUTOMATED SEQUENCE OF VALUES. START VALUE = SEED. 
STF_NAME VARCHAR(30) NOT NULL,			-- THIS COLUMN DOES NOT ALLOW NULL VALUES	
STF_GENDER CHAR CHECK (STF_GENDER IN ('M','F')) DEFAULT 'F',
STF_COURSE_ID INT REFERENCES tblcourses (course_id)			-- MEANS, STAFF SHOULD BE RECRUITED FOR A VALID COURSE.
)

-- QUERY 10: 
INSERT INTO TBLSTAFF VALUES 	('JOHN',  'M', 101),  ('JOHNY',  'M', 101)
SELECT * FROM TBLSTAFF		


-- QUERY 11: 
INSERT INTO TBLSTAFF (STF_NAME, STF_COURSE_ID)  VALUES  ('JEFF', 101)  -- MISSING COLUMNS WILL TAKE DEFAULT VALUES
SELECT * FROM TBLSTAFF		



/* DATABASE DIAGRAMS :  TO AUDIT THE RELATIONS ACROSS TABLES (ER Models) IN THE DATABASE. 
IN SSMS : SERVER > DATABASE > RIGHT CLICK "DATABASE DIAGRAM" > INSTALL DIAGRAM SUPPORT.
RIGHT CLICK "DATABASE DIAGRAM" > NEW DATABASE DIAGRAM > SELECT TABLES > ADD > CLOSE.
THIS RESULTS IN ONE "ER DIAGRAM" = ENTITY RELATIONSHIP DIAGRAM. 

SELECT EACH RELATION (LINE B/W TABLES) > RIGHT CLICK > PROPERTIES > WE SEE FOREIGN KEY TABLE & COLUMN
AND CANDIDATE KEY TABLE & COLUMN. CANDIDATE KEY MEANS  : PRIMARY KEY & UNIQUE KEY. */

/*
INDEXES BASICS
INDEXES :  	DATABASE OBJECTS USED FOR FASTER SEARCH  OPERATIONS. 
			MEANS, INDEXES ARE NEEDED FOR FASTER EXECUTION OF CONDITIONS USING "WHERE".

BASIC TYPES OF INDEXES:
 1. CLUSTERED INDEX :	THIS INDEX CONTROLS ACTUAL TABLE. MEANS, INDEX DATA IS "CLUSTERED" OR "GROUPED" WITH TABLE. 
						WHENEVER WE DEFINE PRIMARY KEY, ONE CLUSTERED INDEX IS AUTO CREATED.
						A TABLE CAN HAVE ONLY ONE CLUSTERED INDEX. HENCE ONLY ONE PRIMARY KEY.

 2. NON CLUSTERED INDEX : THE INDEX REFERENCES OR DIRECTS THE QUERY TO THE TABLE DATA.
						WHENEVER WE DEFINE UNIQUE KEY, ONE NONCLUSTERED INDEX IS CREATED.
						A TABLE CAN HAVE UPTO 999 NON CLUSTERED INDEXES AND HENCE, UPTO 999 UNIQUE KEY CONSTRAINTS.	
						 					
SYNTAX :  CREATE CLUSTERED  | NONCLUSTERED  INDEX <INDEXNAME>  ON  <TABLE-NAME> ( <<COLUMNNAME>> ) 

MORE INDEXES IN LATER CLASSES (COLUMNSTORE, INCLUDED, FILTERED, ONLINE....) AS PER YOUR COURSE PLAN. */

CREATE CLUSTERED			INDEX IND1  ON  TBLSTAFF (STF_ID)			
CREATE NONCLUSTERED			INDEX IND2  ON  TBLSTAFF (STF_GENDER)

SELECT * FROM TBLSTAFF WHERE STF_ID  >= 100001
SELECT * FROM TBLSTAFF WHERE STF_GENDER = 'M'


--	WHILE EXECUTING ABOVE QUERIES, "QUERY OPTIMIZER"  COMPONENT DECIDES THE BEST INDEX TO BE USED 
--	FROM THE AVAILABLE LIST OF INDEXES IN THE TABLE.  

-- our actual job requirement :		we need to define indexes on the frequently searched columns.


