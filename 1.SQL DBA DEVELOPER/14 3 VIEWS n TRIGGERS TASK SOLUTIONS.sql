CREATE TABLE FLIGHT
(	CRAFT_CODE VARCHAR(30),
	SOURCE VARCHAR(30),
	DESTINATION VARCHAR(30)
)

CREATE TABLE RESERVATIONS
(	CRAFT_CODE VARCHAR(30),
	NO_OF_SEATS INT,
	CLASS VARCHAR(30)
)




-- TASK 1:  WRITE A QUERY TO REPORT LIST OF ALL RESERVATIONS FOR A GIVEN FLIGHT?
CREATE FUNCTION fnReportRsv (@FlightID varchar(30))
RETURNS table
AS
RETURN 
(
SELECT * FROM FLIGHT
INNER JOIN 
RESERVATIONS
ON
FLIGHT.CRAFT_CODE = RESERVATIONS.CRAFT_CODE 
WHERE FLIGHT.CRAFT_CODE = @FlightID
)


-- TASK 2:  WRITE A PROCEDURE TO REPORT LIST OF AL SUCH FLIGHTS WITH MORE THAN GIVEN COUNT OF RESERVATIONS?
CREATE PROCEDURE fnReportRsv (@RSVCOUNT INT)
AS
(
SELECT F.CRAFT_CODE, COUNT(*) AS NUMBER_OF_RESERVATIONS FROM FLIGHT AS F
INNER JOIN 
RESERVATIONS AS R
ON
F.CRAFT_CODE = R.CRAFT_CODE 
GROUP BY F.CRAFT_CODE
HAVING COUNT(*) >  @RSVCOUNT
)

-- TASK 3:  WRITE A PROCEDURE TO VALIDATE AND INSERT DATA INTO RESERVATIONS IN SUCH A WAY THE MINIMUM SEATS SHOULD BE 10
CREATE PROCEDURE uspInsertData (@CRAFTCODE VARCHAR(30),@SEATS INT,  @CLASS VARCHAR(30))
AS
BEGIN
IF (@SEATS  >= 10)
INSERT INTO RESERVATIONS VALUES ( @CRAFTCODE, @SEATS, @CLASS)
ELSE
PRINT 'INVALID DATA INSERT'
END 


EXEC uspInsertData 'AI01', 11, 'ECO'



-- TASK 4:  WRITE A PROCEDURE TO VALIDATE AND INSERT DATA INTO FLIGHT TABLE IN SUCH A WAY SOURCE CITY AND DESTINATION CITY ARE DIFFERENT.
CREATE PROCEDURE uspInsertDataV2 (@CRAFTCODE VARCHAR(30), @SOURCE VARCHAR(30), @DESTINATION VARCHAR(30))
AS
BEGIN
IF (@SOURCE != @DESTINATION)
INSERT INTO FLIGHT VALUES ( @CRAFTCODE, @SOURCE, @DESTINATION)
ELSE
PRINT 'INVALID DATA INSERT'
END 


EXEC uspInsertDataV2 'AI01', 'CITY1' , 'CITY2'		-- NO ERROR
EXEC uspInsertDataV2 'AI01', 'CITY1' , 'CITY1'		-- INVALID INSERT



