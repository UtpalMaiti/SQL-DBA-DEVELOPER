-- EXAMPLE 1:				REPORTS ERROR						
DECLARE @VAR1 INT		-- THIS IS A VARIABLE. USED TO STORE ANY DATA TEMPORARILY IN MEMORY.
SET @VAR1 = 'ABC'
SELECT @VAR1 


-- EXAMPLE 2:				REPORTS MESSAGE
BEGIN TRY				-- IF THERE IS ANY ERROR INSIDE THE TRY BLOCK THEN CATCH BLOCK IS AUTO EXECUTED. 
DECLARE @VAR1 INT
SET @VAR1 = 'ABC'
SELECT @VAR1 
END TRY
BEGIN CATCH
PRINT 'ERROR DURING SQL BATCH EXECUTION'
END CATCH


-- EXAMPLE 3:				REPORTS ERROR  + REPORTS MESSAGE
BEGIN TRY
DECLARE @VAR1 INT
SET @VAR1 = 'ABC'
SELECT @VAR1 
END TRY
BEGIN CATCH
PRINT 'ERROR DURING SQL BATCH EXECUTION'
;THROW					-- THIS STATEMENT REPORTS THE ACTUAL ERROR MESSAGE
END CATCH



 
USE [DB_OBJECTS] 
GO

CREATE TABLE RESERVATION11
(
CRAFT_CODE VARCHAR(30),
NO_OF_SEATS INT,
CLASS VARCHAR(30)
)

INSERT INTO RESERVATION11 VALUES 	('AI01', 11, 'EC'), 	('AI02', 12, 'EC'), 
									('AI03', 13, 'EC'), 	('AI04', 14, 'EC')
SELECT * FROM RESERVATION11


CREATE TABLE RESERVATION22
(
CRAFT_CODE VARCHAR(30),
NO_OF_SEATS INT,
CLASS VARCHAR(30)
)


-- REQUIREMENT:  HOW TO COPY DATA FROM RESERVATION1 TO RESERVATION2 IN A TRANSACTION ENVIRONMENT ? 

CREATE TYPE	UserDefinedTableType 
AS TABLE
( 	
CRAFT_CODE 		NVARCHAR(30),	
NO_OF_SEATS 	INT,	
CLASS 			NVARCHAR(30)
)

CREATE PROCEDURE uspCopyData @TVP  UserDefinedTableType	READONLY		-- this is called TABLE VALUED PARAMETER
AS
BEGIN
	BEGIN TRY
	BEGIN TRANSACTION
	INSERT INTO RESERVATION22 SELECT * FROM @TVP
	COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
	ROLLBACK TRANSACTION
	END CATCH
END 

DECLARE @TABLE_VARIABLE UserDefinedTableType 
INSERT INTO @TABLE_VARIABLE SELECT * FROM RESERVATION11
EXECUTE uspCopyData @TABLE_VARIABLE

SELECT * FROM RESERVATION11



-- OUTPUT PARAMETERS:	ALSO CALLED "OUT" PARAMETERS. 
-- SUCH PARAMETERS THAT RETURN ONE OR MORE VALUES FROM THE GIVEN STORED PROCEDURE.


CREATE OR ALTER PROC uspReportRowCount1 (@seats int, @rcount int OUT)		-- OUT IS THE DIRECTION OF PARAMETER
AS
BEGIN
	BEGIN TRY
	BEGIN TRANSACTION
	SELECT @rcount = COUNT(*) FROM RESERVATION11 WHERE NO_OF_SEATS > @seats
	COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
	ROLLBACK TRANSACTION
	END CATCH
END

-- HOW TO EXECUTE ABOVE STORED PROCEDURE ?
DECLARE @VAR INT					
EXECUTE uspReportRowCount1 1, @VAR OUT
SELECT 'THERE ARE ' + CAST (@VAR AS VARCHAR(20))  + ' RESERVATIONS IN THE TABLE'


-- TASK 1:  WRITE A PROCEDURE TO REPORT DATA IN BELOW FORMAT BASED ON INPUT VALUES?
			-- THERE ARE n RESERVATIONS WITH NUMBER OF SEATS ABOVE m
			-- EXAMPLE OUTPUT: 
				-- THERE ARE 4 RESERVATIONS WITH NUMBER OF SEATS ABOVE 1
				-- THERE ARE 7 RESERVATIONS WITH NUMBER OF SEATS ABOVE 2

SELECT * FROM RESERVATION11

CREATE OR ALTER PROC uspResTask1 (@aboveseat int, @rcount int OUT)		-- OUT IS THE DIRECTION OF PARAMETER
AS
BEGIN
	BEGIN TRY
	BEGIN TRANSACTION
	SELECT @rcount = COUNT(*) FROM RESERVATION11 WHERE NO_OF_SEATS > @aboveseat
	COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
	ROLLBACK TRANSACTION
	END CATCH
END

-- THERE ARE 4 RESERVATIONS WITH NUMBER OF SEATS ABOVE 1
-- HOW TO EXECUTE ABOVE STORED PROCEDURE ?
DECLARE @VAR INT,@seats int =1					
EXECUTE uspResTask1 @seats, @VAR OUT
SELECT 'THERE ARE ' + CAST (@VAR AS VARCHAR(20))  + ' WITH NUMBER OF SEATS ABOVE '+CAST (@seats AS VARCHAR(20))

-- THERE ARE 7 RESERVATIONS WITH NUMBER OF SEATS ABOVE 2
DECLARE @VAR INT,@seats int =2					
EXECUTE uspResTask1 @seats, @VAR OUT
SELECT 'THERE ARE ' + CAST (@VAR AS VARCHAR(20))  + ' WITH NUMBER OF SEATS ABOVE '+CAST (@seats AS VARCHAR(20))


-- TASK 2:  WRITE A PROCEDURE TO ACCEPT A TABLE AND REPORT LIST OF CONSTRAINTS IN THAT TABLE ?

CREATE PROC uspGetTableConstraint (@tableName NVARCHAR(100))		-- OUT IS THE DIRECTION OF PARAMETER
AS
BEGIN
EXEC sp_help @tableName ;  
END

EXEC uspGetTableConstraint 'RESERVATION11';

USE [AdventureWorks2014];  
GO  
EXEC sp_helpconstraint 'RESERVATION11';

-- TASK 3:  WRITE A PROCEDURE TO IDENTIFY THE LIST OF DUPLICATE ROWS IN A TABLE?

 SELECT [CRAFT_CODE],[NO_OF_SEATS],[CLASS] FROM   RESERVATION11
 group by [CRAFT_CODE],[NO_OF_SEATS],[CLASS]


 --or

;with cte_dup_tbl
as
(
SELECT *,row_number()over (partition by [CRAFT_CODE] order by [CRAFT_CODE] asc) as r_no  FROM RESERVATION11
) 
select * from cte_dup_tbl where r_no>1
--delete from cte_dup_tbl where r_no>1


-- TASK 4:  WRITE A PROCEDURE TO REMOVE THE DUPLICATED ROWS IN A TABLE?

;with cte_dup_tbl
as
(
SELECT *,row_number()over (partition by [CRAFT_CODE] order by [CRAFT_CODE] asc) as r_no  FROM RESERVATION11
) 
--select * from cte_dup_tbl where r_no>1
delete from cte_dup_tbl where r_no>1

