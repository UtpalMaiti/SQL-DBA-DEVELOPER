CREATE DATABASE [DB_OBJECTS]

USE [DB_OBJECTS]

CREATE TABLE FLIGHT
(	
	AIR_CRAFT_CODE VARCHAR(30) PRIMARY KEY,	
	SOURCE_CITY VARCHAR(30),
	DESTINATION_CITY VARCHAR(30)
)

INSERT INTO FLIGHT VALUES ('EMI1', 'DUB', 'HYB')
INSERT INTO FLIGHT VALUES ('EMI2', 'DUB', 'ABD')
INSERT INTO FLIGHT VALUES ('EMI3', 'HYB', 'LSA')


create table Reservation
(
ReservationID int Identity (1001,1),	
AIR_CRAFT_CODE VARCHAR(30) REFERENCES FLIGHT(AIR_CRAFT_CODE),	
No_of_Seats int,
Class_Code varchar(10) 
)

INSERT INTO Reservation VALUES ('EMI1', 1, 'ECO')
INSERT INTO Reservation VALUES ('EMI2', 8, 'ECO')
INSERT INTO Reservation VALUES ('EMI1', 3, 'ECO')
INSERT INTO Reservation VALUES ('EMI2', 4, 'BIZ')
INSERT INTO Reservation VALUES ('EMI1', 3, 'ECO')
INSERT INTO Reservation VALUES (NULL, 3, 'ECO')



-- REQUIREMENT 1:	HOW TO REPORT LIST OF ALL FLIGHTS?
SELECT * FROM FLIGHT

-- REQUIREMENT 2:	HOW TO REPORT LIST OF ALL RESERVATIONS?
SELECT * FROM Reservation


-- REQUIREMENT 3:	HOW TO REPORT LIST OF FLIGHTS AND RESPECTIVE RESERVATIONS (MATCHING DATA)? INNER JOIN
SELECT * FROM FLIGHT			-- THIS IS LEFT TABLE
INNER JOIN 
Reservation						-- THIS IS RIGHT TABLE
ON
Reservation.AIR_CRAFT_CODE = FLIGHT.AIR_CRAFT_CODE


-- REQUIREMENT 4:	HOW TO REPORT LIST OF ALL FLIGHTS WITH & WITHOUT RESERVATIONS (MATCHING, MISSING DATA) ?
SELECT * FROM FLIGHT
LEFT OUTER JOIN		-- All Left Table Data + Matching Right Table Data. Non match Right Table data is null. 
Reservation
ON
Reservation.AIR_CRAFT_CODE = FLIGHT.AIR_CRAFT_CODE


-- REQUIREMENT 5:	HOW TO REPORT LIST OF FLIGHTS WITHOUT RESERVATIONS (TO REPORT ONLY MISSING DATA)?
SELECT * FROM FLIGHT
LEFT OUTER JOIN		-- All Left Table Data + Matching Right Table Data. Non match Right Table data is null. 
Reservation
ON
Reservation.AIR_CRAFT_CODE = FLIGHT.AIR_CRAFT_CODE
WHERE 
Reservation.AIR_CRAFT_CODE IS NULL			-- TO FIND MISSING DATA



-- REQUIREMENT 6:	HOW TO REPORT LIST OF FLIGHTS WITH RESERVATIONS (TO REPORT ONLY MATCHING DATA)?
SELECT * FROM FLIGHT
LEFT OUTER JOIN		-- All Left Table Data + Matching Right Table Data. Non match Right Table data is null. 
Reservation
ON
Reservation.AIR_CRAFT_CODE = FLIGHT.AIR_CRAFT_CODE
WHERE
Reservation.AIR_CRAFT_CODE IS NOT NULL		-- TO FIND MATCHING DATA


-- REQUIREMENT 7:	HOW TO REPORT LIST OF FLIGHTS WITH & WITHOUT RESERVATIONS USING "RIGHT OUTER" JOIN?
SELECT * FROM  Reservation		-- THIS IS LEFT TABLE
RIGHT OUTER JOIN				-- ALL RIGHT + MATCHING LEFT. NON MATCH LEFT IS NULL
FLIGHT							-- THIS IS RIGHT TABLE
ON
FLIGHT.AIR_CRAFT_CODE = Reservation.AIR_CRAFT_CODE



-- REQ 8: REPORT LIST OF FLIGHTS WITH & WITHOUT RESERVATIONS, LIST OF RESERVATIONS WITH & WITHOUT FLIGHTS?
SELECT * FROM  FLIGHT 
FULL OUTER JOIN					-- THIS IS A COMBINATION OF BOTH LEFT OUTER JOIN  + RIGHT OUTER JOIN
Reservation
ON
Reservation.AIR_CRAFT_CODE = FLIGHT.AIR_CRAFT_CODE


-- EXAMPLE FOR CROSS JOIN:
SELECT * FROM  FLIGHT	CROSS JOIN	Reservation			-- 3 flights, 6 reservations. means : 18 combinatons
SELECT * FROM  FLIGHT	CROSS APPLY Reservation
SELECT * FROM  FLIGHT , Reservation


/*
WHEN WORKING WITH BIG DATA, IT IS ADVISABLE TO USE "JOIN OPTIONS" FOR FASTER QUERY EXECUTIONS. 
		i.   MERGE JOIN OPTION	:	USED TO JOIN BIGGER TABLES (TABLES WITH MORE THAN 100m ROWS)
		ii.  LOOP JOIN OPTION	:	USED TO JOIN SMALL TABLES  (TABLES WITH LESS THAN 100m ROWS)
		iii. HASH JOIN OPTION	:	USED TO JOIN HEAP TABLES   (TABLES WITHOUT PRIMARY KEY)
*/

SELECT * FROM FLIGHT
INNER MERGE JOIN					-- FOR BIG TABLES
Reservation
ON
Reservation.AIR_CRAFT_CODE = FLIGHT.AIR_CRAFT_CODE


SELECT * FROM FLIGHT
INNER LOOP JOIN						-- FOR SMALL TABLES
Reservation
ON
Reservation.AIR_CRAFT_CODE = FLIGHT.AIR_CRAFT_CODE


SELECT * FROM FLIGHT
LEFT OUTER HASH JOIN						-- FOR HEAP TABLES
Reservation
ON
Reservation.AIR_CRAFT_CODE = FLIGHT.AIR_CRAFT_CODE


-- EXAMPLE SCENARIO FOR CROSS APPLY:
SELECT  TOP 50  total_worker_time / execution_count as AVG_EXEC_TIME,*
FROM SYS.DM_EXEC_QUERY_STATS
CROSS APPLY						-- THIS IS SIMILAR TO CROSS JOIN
SYS.DM_EXEC_SQL_TEXT (PLAN_HANDLE)
ORDER BY  AVG_EXEC_TIME DESC 

SELECT * FROM SYS.DM_EXEC_QUERY_STATS
