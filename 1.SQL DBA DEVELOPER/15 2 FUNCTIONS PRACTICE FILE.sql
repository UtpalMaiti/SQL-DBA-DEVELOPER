-- EXAMPLE FOR SCALAR VALUE RETURNING FUNCTION (SCALAR :  SINGULAR VALUES)

USE [DB_OBJECTS] 
GO


-- REQUIREMENT 1:  HOW TO COMPUTE SUM OF THREE NUMBERS ?
CREATE FUNCTION fnComputeSum (@input1 int, @input2 int, @input3 int)
RETURNS int
AS
BEGIN
DECLARE	@SUM INT		-- THIS STATEMENT IS USED TO DEFINE A TEMPORARY VALUE STORE : VARIABLE
SET @SUM = @INPUT1 + @INPUT2 + @INPUT3
RETURN @SUM
END 


-- TO EXECUTE ABOVE FUNCTION : 
SELECT DBO.fnComputeSum (1001, 2001, 3000)
SELECT DBO.fnComputeSum (101, 201, 300)


-- REQUIREMENT 2: HOW TO GENERATE A SEQUENCE OF VALUES BASED ON GIVEN START & END LIMITS?  multiline table valued functions
CREATE FUNCTION fnReportSequenceValues (@start int, @end int)
RETURNS @table_var  TABLE (SeqValue int)	-- TABLE VARIABLES ARE STORED IN TEMPDB. 
AS
BEGIN
DECLARE @COUNTER INT = @start
WHILE @COUNTER <= @end							-- AS LONG AS; LOOP;
	BEGIN
	INSERT INTO @table_var VALUES (@COUNTER)
	SET @COUNTER = @COUNTER + 1
	END 
RETURN 
END

SELECT * FROM fnReportSequenceValues (1, 100)
SQL1, SQL2, SQL3....... 

-- HOW TO GENERATE SEQUENCE OF ALPHANUMERIC VALUES?   SQL1, SQL2, SQL3.....
CREATE OR ALTER FUNCTION fnReportSequenceValues (@start int, @end int)
RETURNS @table_var  TABLE (SeqValue VARCHAR(30))
AS
BEGIN
DECLARE @COUNTER INT = @start
WHILE @COUNTER <= @end
	BEGIN
	INSERT INTO @table_var VALUES ('SQL' + CONVERT(VARCHAR(30), @COUNTER))
	SET @COUNTER = @COUNTER + 1
	END 
RETURN 
END

SELECT * FROM fnReportSequenceValues (1, 100)


