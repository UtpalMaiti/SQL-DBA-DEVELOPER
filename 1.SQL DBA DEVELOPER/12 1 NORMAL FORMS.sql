/*
NORMAL FORMS ARE A MECHANISM TO IDENTIFY THE TABLES AND THEIR RELATIONS.
ARRANGE THE TABLES IN THE DATABASE IN SUCH A WAY WE SAVE SPACE.
MEANS, NORMAL FORMS ARE USED IN THE DATABASE DESIGN FOR EASY RELATION MANAGEMENT AND EASY DATA VALIDATIONS.

1 NF		:	ATOMIC VALUES. MEANS : EVERY COLUMN CAN HAVE ONLY SINGULAR VALUES. 
				EX :	YEAR, QUARTER, MONTH, DAY  COLUMNS IN THE TIME_DATA TABLE @ CASE STUDY 

2 NF		:	A TABLE SHOULD HAVE ATLEAST ONE UNIQUE COLUMN.
				FUNCTIONAL DEPENDANCY (FD) USING "CANDIDATE KEYS". 
				CANDIDATE KEYS ARE SUCH COLUMNS THAT ENFORCE UNIQUENESS. PK & UQ ARE CANDIDATE KEYS.
				EX	:	TBLCOURSES TABLE IN CONSTRAINTS CHAPTER HAS UNIQUE KEY

3 NF		:	TABLE SHOULD HAVE ATLEAST ONE FOREIGN KEY.
				MULTI VALUED DEPENDANCY (MVD). IMPLEMENTATION OF REFERENCES TO PK / UQ [CANDIDATE KEY].
				THIS RESULTS IN  1 TO MANY RELATIONSHIP.  1  : M  [EX:  1 COURSE HAS MULTIPLE STUDENTS]
				EX	:	TBLSTUDENTS,  TBLSTAFF IN CONSTRAINTS CHAPTER.

				IF FK HAS CANDIDATE KEY THEN IT IS 1 : 1 RELATION.  MEANS, FK DOES NOT ALLOW DUPLICATES.
				THEN EACH PARENT HAS ONLY ONE CHILD. 

BCNF		:	TABLE SHOULD BE IN 3NF. THERE CAN BE MORE THAN ONE FOREIGN KEY IN THE TABLE.
				EX	:	SALES_DATA TABLE IN THE CASE STUDY
						SALES_DATA REFERENCES PRODUCTS_DATA, TIME_DATA & CUSTOMERS_DATA TABLES

4 NF		:	TABLE SHOULD BE IN 3RD NORMAL FORM AND ALSO SHOULD HAVE "SELF REFERENCING KEYS". 
				MEANS: A TABLE RELEATED TO ITSELF. ONE COLUMN IN A TABLE HAS RELATION TO ANOTHER COLUMN IN THE SAME TABLE.
*/




USE [DB_OBJECTS]  

-- REQUIREMENT	:	EVERY MANAGER SHOULD BE A VALID EMPLOYEE
CREATE TABLE empDetails
(
EmpID int,
EmpName varchar(30),
EmpManagerID int 			
)

-- HOW TO ADD PRIMARY KEY TO EXISTING TABLE?
ALTER TABLE empDetails ALTER COLUMN EmpID INT NOT NULL 
ALTER TABLE empDetails ADD CONSTRAINT PK_EMPID  PRIMARY KEY (EmpID)

-- HOW TO ADD FOREIGN KEY TO EXISTING TABLE?			SELF JOIN
ALTER TABLE empDetails ADD CONSTRAINT FK_EMPID  FOREIGN KEY (EmpManagerID) REFERENCES empDetails(EmpID)

INSERT empDetails VALUES (1001, 'JOHN', 1001), (1002, 'JEFF', 1001)
INSERT empDetails VALUES (1003, 'AMIN', 1002), (1004, 'AMINI', 1002)	
INSERT empDetails VALUES (1005, 'SAM', 1002), (1006, 'SAMI', 1005)	

INSERT empDetails VALUES (1007, 'AMINISH', 1008)				-- ERROR. REASON : INVALID MANAGER ID.
INSERT empDetails VALUES (1007, 'AMINISH', 1003)				-- NO ERROR. MEANS : AMIN IS MANAGER FOR AMINISH

SELECT * FROM empDetails;

SELECT TOP 3 * FROM empDetails;

SELECT * FROM empDetails ORDER BY EMPID OFFSET 2 ROWS;

SELECT * FROM empDetails ORDER BY EMPID OFFSET 2 ROWS FETCH NEXT 3 ROWS ONLY;

-- HOW TO REPORT 4TH ROW OF THE TABLE?
SELECT * FROM empDetails ORDER BY EMPID OFFSET 3 ROWS FETCH NEXT 1 ROWS ONLY;


-- REQUIREMENT :  HOW TO REPORT LIST OF ALL MANAGERS AND THIER RESPECTIVE EMPLOYEES?

-- QUERY 1:  HOW TO REPORT LIST OF ALL EMPLOYEES AND THEIR RESPECTIVE MANAGERS?  MEANS: MATCHING DATA
SELECT * FROM empDetails AS E1
INNER JOIN empDetails AS E2						-- SELF JOIN
ON E1.EmpID = E2.EmpManagerID 


-- QUERY 2:  HOW TO REPORT LIST OF ALL EMPLOYEES AND THEIR RESPECTIVE MANAGERS?  MEANS: MATCHING DATA
SELECT E1.EmpID AS MANAGER_ID, E1.EmpName AS MANAGER_NAME, E2.EmpID AS EMP_ID, E2.EmpName AS EMPLOYEE_NAME
FROM empDetails AS E1
INNER JOIN empDetails AS E2 
ON E1.EmpID = E2.EmpManagerID 


-- QUERY 3:  HOW TO REPORT LIST OF ALL EMPLOYEES FOR A GIVEN MANAGER "JEFF"?
SELECT E1.EmpID AS MANAGER_ID, E1.EmpName AS MANAGER_NAME, E2.EmpID AS EMP_ID, E2.EmpName AS EMPLOYEE_NAME
FROM empDetails AS E1
INNER JOIN empDetails AS E2 
ON E1.EmpID = E2.EmpManagerID 
WHERE 
E1.EmpName = 'JEFF'
